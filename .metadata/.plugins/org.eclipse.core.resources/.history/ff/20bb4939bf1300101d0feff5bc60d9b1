package com.bankapp.banking_system.ServiceImpl;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bankapp.banking_system.Repository.CustKYC_Repo;
import com.bankapp.banking_system.Repository.CustomerRepo;
import com.bankapp.banking_system.Service.CustKYC_Service;
import com.bankapp.banking_system.entities.CustKYC;
import com.bankapp.banking_system.entities.Customer;


@Service 
public class CustKYC_ServImpl implements CustKYC_Service {
	
	@Autowired
	private CustKYC_Repo custkycRepo;
	
	@Autowired
	private CustomerRepo customerRepo;

	@Override
	public CustKYC saveKYC(CustKYC customerKYC) {
		
		Customer customer = customerRepo.findByCustomerId(customerKYC.getCustomer().getCustomerId())
				.orElseThrow(()->new IllegalArgumentException("Wrong CustomerId"));
		
		customerKYC.setCustomer(customer);
		
		customer.setKycStatus("Y");
		
		return custkycRepo.save(customerKYC);
	}

	@Override
	public Optional<CustKYC> getKYCById(Long id) {
		
		return custkycRepo.findById(id);
	}

	@Override
	public Optional<CustKYC> getKYCByCustomerAadhar(String aadharId) {
		
		return custkycRepo.findByAadharId(aadharId);
	}

	@Override
	public void deleteKYC(Long id) {
		
		custkycRepo.deleteById(id);

	}
	
	@Override
	public Optional<CustKYC> getKYCByCustomerId(String customerId) {
	    return custkycRepo.findByCustomerCustomerId(customerId);
	}

	
	 @Override
	    public CustKYC updateKYC(String customerid, CustKYC updatedKYC) {
	        Optional<CustKYC> existingKYC = custkycRepo.findByCustomer_CustomerId(customerid);
	        if (existingKYC.isPresent()) {
	            CustKYC kyc = existingKYC.get();
	            
	            // Update fields (only if they are not null in updatedKYC)
	            if (updatedKYC.getAadharId() != null) {
	                kyc.setAadharId(updatedKYC.getAadharId());
	            }
	            if (updatedKYC.getPanId() != null) {
	                kyc.setPanId(updatedKYC.getPanId());
	            }
	            if (updatedKYC.getAddressProof() != null) {
	                kyc.setAddressProof(updatedKYC.getAddressProof());
	            }
	            
	            return custkycRepo.save(kyc);
	        } else {
	            throw new RuntimeException("KYC record not found for ID: " + id);
	        }
	    }

}
