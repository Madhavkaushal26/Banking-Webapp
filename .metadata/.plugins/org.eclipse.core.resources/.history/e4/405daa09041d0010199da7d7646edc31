package com.bankapp.banking_system.ServiceImpl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.bankapp.banking_system.Repository.CustOfferRepo;
import com.bankapp.banking_system.Repository.CustomerRepo;
import com.bankapp.banking_system.Repository.OfferandRewardRepo;
import com.bankapp.banking_system.Service.OfferRewardService;
import com.bankapp.banking_system.entities.CustOfferAvl;
import com.bankapp.banking_system.entities.Customer;
import com.bankapp.banking_system.entities.OfferandReward;


@Service 
public class OfferRewardServImpl implements OfferRewardService {
	
	@Autowired
	private OfferandRewardRepo offerrewardRepo;
	
	@Autowired
    private CustOfferRepo custOfferRepo;
	
	@Autowired
	private CustomerRepo customerRepo;
	
	@Autowired
    private JdbcTemplate jdbcTemplate;

	@Override
	public OfferandReward saveOffer(OfferandReward offerReward) {
		
		return offerrewardRepo.save(offerReward);
	}

	@Override
	public Optional<OfferandReward> getOfferById(Long id) {
		
		return offerrewardRepo.findById(id);
	}

	@Override
	public List<OfferandReward> getAllOffers() {
		
		return offerrewardRepo.findAll();
	}

	@Override
	public void deleteOffer(Long id) {
		
		offerrewardRepo.deleteById(id);

	}
	
	public List<OfferandReward> evaluateOffersForCustomer(String customerId) {
	    Customer customer = customerRepo.findByCustomerId(customerId)
	            .orElseThrow(() -> new RuntimeException("Customer not found"));

	    List<OfferandReward> allOffers = offerrewardRepo.findAll();
	    List<CustOfferAvl> alreadyAvailedOffers = custOfferRepo.findByCustomer_CustomerId(customerId);

	    return allOffers.stream().filter(offer -> {
	        String query = offer.getOfferQuery(); // dynamic SQL for eligibility
	        System.out.println(query);
	        try {
	            List<String> eligibleCustomerIds = jdbcTemplate.queryForList(query, String.class);

	            boolean isEligible = eligibleCustomerIds.contains(customerId);
	            boolean alreadyAvailed = alreadyAvailedOffers.stream()
	                    .anyMatch(o -> o.getOfferReward().getOfferCode().equals(offer.getOfferCode()));

	            return isEligible && !alreadyAvailed;
	        } catch (Exception e) {
	            System.out.println("Error running query for offer: " + offer.getOfferCode());
	            return false;
	        }
	    }).collect(Collectors.toList());
	}

	

}
